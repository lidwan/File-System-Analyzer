package com.loayidwan;

import org.apache.commons.io.FilenameUtils;

import java.io.File;
import java.nio.file.*;
import java.io.FileInputStream;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;


public class FileUtils {
    public static String getFileExtension(String fileName) {
        String ext = FilenameUtils.getExtension(fileName);

        return ext.isEmpty() ? "Unknown" : ext;
    }

    public static String calcHashCode(Path filePath) throws NoSuchAlgorithmException {
        File file = filePath.toFile();

        MessageDigest digest = MessageDigest.getInstance("SHA-256");

        //Yes, the rest of this method's code was generated by AI, I am NOT about to reinvent the wheel here ;)
        // Read the file in chunks
        try (FileInputStream fis = new FileInputStream(file)) {
            byte[] buffer = new byte[4096]; // 4 KB buffer size
            int bytesRead;
            while ((bytesRead = fis.read(buffer)) != -1) {
                digest.update(buffer, 0, bytesRead);
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        // Convert the resulting hash to a hexadecimal string
        byte[] hashBytes = digest.digest();
        StringBuilder hexString = new StringBuilder();
        for (byte b : hashBytes) {
            String hex = Integer.toHexString(0xff & b); // Convert byte to hex
            if (hex.length() == 1) hexString.append('0'); // Ensure 2 characters per byte
            hexString.append(hex);
        }
        return hexString.toString();
    }

    public static String humanReadableSize(long bytes) {
        String[] units = {"B", "KB", "MB", "GB", "TB", "PB"};
        int unitIndex = 0;
        double size = bytes;

        while (size >= 1024 && unitIndex < units.length - 1) {
            size /= 1024;
            unitIndex++;
        }

        return String.format("%.2f %s", size, units[unitIndex]);
    }
}

